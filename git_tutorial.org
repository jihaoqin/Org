* git
  git用起来真好玩儿啊，可以在linux和Windows下进行操作。
* 创建版本库
  新建一个文件夹，进入文件夹， git init 就ok了，之后会多一个.git的目录
** 添加文件到暂存区
   git add filename。只能跟踪文本文件的改动，二进制文件跟踪不了，word就是二进制文件。
   git commit -m "comment" 把暂存区的文件同步到仓库中
   
   git status 能告诉我们哪个文件改变了，哪个文件没有被添加到仓库

   git diff filename 能告诉我们<暂存区,仓库>中的文件和工作区的文件的差别！
   git diff HEAD -- filename 可以查看工作区和仓库中的文件差别。

   git log 能告诉我们每次commit的一些信息，即所谓 提交日志

   git reset --hard {HEAD,HEAD^,HEAD^^,HEAD~100,commit id}，reset能重置很多东西，这里是把仓库的版本回退到原来的状态
   git reset HEAD filename 用仓库中的版本覆盖暂存区中的改动
   

   git reflog 能看到HEAD数组的状态，貌似每次对仓库的更改都会在HEAD数组添加相应的一个元素。对HEAD数组的读取就能改到之前任何一个状态。

   git checkout -- filename 将<暂存区，仓库>中的文件覆盖工作区的。
* 分支管理
  master是一个指针,HEAD也是一个指针,每个分支都有一个指针,指针指向一个数组.HEAD指向的数组就是当前工作分支.

  git branch ubun 创建ubun分支
  git branch      查看当前分支

  git checkout ubun 切换到ubun分支master是一个指针,HEAD也是一个指针,每个分支都有一个指针,指针指向一个数组.HEAD指向的数组就是当前工作分支.

  git branch ubun 创建ubun分支
  git branch      查看分支
  git branch -d ubun 删除分支
  
  git checkout ubun 切换到ubun分支

  git merge ubun _master分支直接跳到ubun,合并分支_

  冲突的解决方式,就是进入文件中把 <<< === >>>部分改掉再commit,两个分支就合并成一个新的状态了

  想象一下你正在dev分支开发新功能,这个时候master分支出现了bug,你需要去修改bug那怎么办呢?
  可以转到master分支,开一个bug分支,fix后再commit,然后push上去.这就出现了问题,你dev分支的代码怎么办?之前你可能是先在dev上commit再转到master分支上的,此时dev还没完成.之后你就push上去了,这是不对的.所以,你可以用stash一下,之后再来恢复现场.
