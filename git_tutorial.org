* git
  git用起来真好玩儿啊，可以在linux和Windows下进行操作。

  git config --global core.editor emacs 设置默认的编辑器

  git config --list 查看设置
* 创建版本库
  新建一个文件夹，进入文件夹， git init 就ok了，之后会多一个.git的目录
** 添加文件到暂存区
   git add filename。只能跟踪文本文件的改动，二进制文件跟踪不了，word就是二进制文件。
   git commit -m "comment" 把暂存区的文件同步到仓库中
   
   git status 能告诉我们哪个文件改变了，哪个文件没有被添加到仓库

   git diff filename 能告诉我们<暂存区,仓库>中的文件和工作区的文件的差别！
   git diff HEAD -- filename 可以查看工作区和仓库中的文件差别。
   git diff --staged    查看staged和仓库中的差别

   git log 能告诉我们每次commit的一些信息，即所谓 提交日志

   git reset --hard {HEAD,HEAD^,HEAD^^,HEAD~100,commit id}，reset能重置很多东西，这里是把仓库的版本回退到原来的状态
   git reset HEAD filename 用仓库中的版本覆盖暂存区中的改动
   如何用暂存区中的文件覆盖working中的文件?
   

   git reflog 能看到HEAD数组的状态，貌似每次对仓库的更改都会在HEAD数组添加相应的一个元素。对HEAD数组的读取就能改到之前任何一个状态。

   git checkout -- filename 将<暂存区，仓库>中的文件覆盖工作区的。
* 分支管理
  master是一个指针,HEAD也是一个指针,每个分支都有一个指针,指针指向一个数组.HEAD指向的数组就是当前工作分支.

  git branch ubun 创建ubun分支
  git branch      查看当前分支

  git checkout ubun 切换到ubun分支master是一个指针,HEAD也是一个指针,每个分支都有一个指针,指针指向一个数组.HEAD指向的数组就是当前工作分支.

  git branch ubun 创建ubun分支
  git branch      查看分支
  git branch -d ubun 删除分支
  
  git checkout ubun 切换到ubun分支

  git merge ubun _master分支直接跳到ubun,合并分支_

  冲突的解决方式,就是进入文件中把 <<< === >>>部分改掉再commit,两个分支就合并成一个新的状态了

  想象一下你正在dev分支开发新功能,这个时候master分支出现了bug,你需要去修改bug那怎么办呢?
  可以转到master分支,开一个bug分支,fix后再commit,然后push上去.这就出现了问题,你dev分支的代码怎么办?之前你可能是先在dev上commit再转到master分支上的,此时dev还没完成.之后你就push上去了,这是不对的.所以,你可以用stash一下,之后再来恢复现场.

  git stash 冷藏当前分支,清空暂存区
  git stash pop 弹出之前冷藏的分支
  git stash list 查看冷藏区的情况

  git pull 和 git fetch [remote-name]的区别? 前者会自动merge,后者需要手动merge
  git clone [https://] 除了拷贝仓库下来,还是自动track远程主机的主分支
* 推送分支
  git push origin master 把master分支推送给远程库,也可以推送别的分支.

  小伙伴们从远程库中clone下来的仓库,是看不到除了master之外的分支的(eg.dev分支).所以小伙伴需要在本地创建一个dev分支,
  git checkout -b dev origin/dev
  =? git branch dev origin/dev
     git checkout dev
  之后,小伙伴可以把他的版本push上去,你也可以push.如果你的版本没有远程库中的新,会提示push不上去,这时候需要把远程库中的pull下来,在本地解决好冲突后再push上去.   
  git pull 貌似是把远程库的东东拉下来,但是可能会提示dev没有tracking information.因为没有指定dev分支与远程库的origin/dev的链接.git branch --set-upstream dev origin/dev,这样就设置了本地库dev和origin/dev的track了.再git pull,之后commit,有冲突,解决冲突,commit,push.

  
* 问题
  tag到底是打在谁身上的,commit,branch?

  如何进行push到remote?
  git push origin [branchname]
  push也能进行branch层面的操作,如果你的push和remote的有冲突,需要现在本地解决冲突再push上去,那么什么是有冲突呢?

  push上去的东西在remote如何进行merge?
  实际上push上去的东西,在remote就直接进行fastforward合并了.

  clone,fetch,pull最小操作单元是什么,branch,整个仓库?
  fetch可以操作origin,git fetch origin

  git pull, git push 缺省参数都是啥?

  什么是建立了track

  如何把两个分支merge起来? 本地分支merge, 远程分支merge, 本地和远程分支merge,是谁跳到谁那里?
  答案是,merge base就是当前的branch

  在不同的分支add东西,一起commit之后会怎么样?
  答案是:会把add的东西都commit到当前分支.

  在不同分支之间跳转的时候,working directory里的文件是跟着branch走吗?
  是的,checkout做的事情有两个. 1.HEAD指针跳转 2.转换工作区文件为branch指向所的commit的快照
  可是如果当前working directory中的工作还未commit,这样会不会丢失呢?git会组织你checkout吗?答案就是git会拒绝checkout的
  
  
  我能查看不同branch之间文件的diff吗

  
