#+TITLE:linux使用记录
#+AUTHOR:司光桐
# 设置大纲标题为缩进模式
#+STARUP:indent


#+TAGS: 终端 org
* 终端使用, org使用                                                  :终端:org:
** 终端中修改cpas为ctrl                                                  :终端:
setxkbmap -option crtl:nocaps

** TAGS的使用
可在文件初始部分加上#+TAGS: TAG1(快捷键)
** 文字的特殊显示用法
-----
*粗体*
_jfkalj_
+删除线+
/xieti/
=git= #等宽字体
** 代码怎么写?
#+begin_src
  实际上快捷建是<s+TAB
#+end_src
#+BEGIN_SRC 
  #+STARUP:indent实际上是以indent的方式显示提纲的,切换的话就是
  M+org-indent-mode
#+END_SRC
#+BEGIN_QUOTE
快捷键是<s+TAB
#+END_QUOTE
** 如何搜索呢
C-s是向后搜索,C-r是向前搜索
搜索出来后,C-s是到下一个搜索结果,C-r是到上一个搜索结果.
** 大纲之间的跳转?
| 快捷键  | 说明               |
| C-c C-n | 上一个标题         |
| C-c C-u | 上一级标题         |
| C-c C-j | 切换到大纲浏览状态 |

** 剪切,复制,标记,注释
C-w  C-y  C-@  Alt-;
     M-y
* linux学习
** 硬件学习
*** 如何硬盘分区
首先硬盘的概念
硬盘就是一个磁盘,上面有sector(扇区),和cylinder(磁环)
硬盘的分区有主分区和扩展分区,加起来不超过四个
扩展分区可再分成逻辑分区


** 目录与路径
首先,mkdir 创建文件夹,rm 删除文件,ls列出当前文件夹~/代表家目录
root的权限最高,啥都能干
文件有所有者,群组,外人的概念三种
/etc/password这下面放的都是系统的账号,群组,密码等信息
*** 改变文件属性和权限
- chgrp
  前提:/etc/group中要有你的组名,那这个组名又是怎么来的呢?
  chgrp GROUP FILE
  文件夹下面的可加-r
- chown
  chown OWNER FILE
  chown OWNER:GROUP FILE
  文件夹下面的加-R
  
*** 权限怎么改呢?
三个群组,每个群组三个,读写执行,共九个
r:4 w:2 x:1
chmod -R 777 FILE  这个就是全部权限都给三个群组了
当然了还有别的语法糖可用
chmod u=rwx,go=rx FILE   还是这个直观一些
chmod u+x FILE 增加执行权限给owner

*** 权限对文件和目录有区别吗?
实际上没啥区别的,文件中的内容是一些数据.
文件rwx就不用解释了
目录中存储的是一个树结构
所以
r代表查看下面有啥文件
w代表对文件增添,改名,删除
x代表可以把目录设为工作目录


** 文件与目录管理
. 此层目录
..上层目录
-前一个 _工作目录_
~ 当前使用者的

你在创建新目录的时候可以制定权限的
mkdir -m 711 FILE 就是 u=rwx g0=__x
rmdir DIR 删除空目录,一种安全的删除方式

*** PATH变量
$PATH 解引用


** 文件内容查阅

| cat  | 由第一行开始显示内容 |
| tac  | 倒着显示             |
| nl   | 输出行号,可单独显示  |
| more | 一页一页地看         |
| less | 可翻页               |
| head | 只看头几行           |
| tail | 只看尾巴             |
| od   | 以二进制方式读文件   | 


** 搜索文件或命令
which -a command #找所有的command,实在PATH路径中搜寻

whereis FILE/DIR(全部名称)

locate keyword
-i 忽略大小写
-r 可接正则表达式

** filesystem
格式化实际上就是指定 _文件系统格式_
一个文件除了内容(data)外还有属性信息
分别放在data block和inode中.
inode实际上是一个指向data block的指针
# 鸟哥的linux私房菜
[[http://cn.linux.vbird.org/linux_basic/0230filesystem_1.php]]

Ext2系统是一个 _索引式文件系统_  ,分为 _多区块群组_ 管理
data block一般来说1k 2k 4k 三种,

_一个block只能存一个文件_,所以文件太小,会让block不够用,文件太大就太零碎了

inode的数据结构大概是有一些存文档名字 权限的,其余的有指向各data block位置的指针,总共十几个,前面的是直接地址,后面的是指向一个存有地址的data block,这样能扩大 可寻址文件的容量 ,比如 1k的 最大支持16GB的文件.

文件与Ext2文件系统的关系是啥?
目录与Ext2的关系是啥?

Ext2会为每个目录分配  _一个inode 至少一个block_ inode里放目录的权限属性等block里放目录里文件的名字和文件inode编号


链接档有两种:
- 快捷方式文件 :: symbolic link
- 透过inode链接产生新文件名 :: hard link

其中hard link,不占用额外的inode,只多占用block. 把在目录中新建的block中的文件名同inode连接起来.
_hard link 虽好,但不是万能的_
一来,hard link不能跨filesystem,原因估计是不同filesystem的block,inode的规格不一样把
二来,不能link目录,要是link目录,cd ../就不知道是谁了,还有说法是两个互相链接就引入了循环,这种循环从技术上是可以判断的,只不过可能数据结构和算法要求比较简单,对于cd这种实时性任务有限制.

symbolic link 实际上就是创建了一个文件,文件的

# 统计各个分区的容量使用情况,在superblock中搜寻
df
-h bytes转换成适合的尺度
-T 显示ext3这样的type


# 统计目录下的容量
du
只显示出当前目录和子目录的大小(单位:kB)
-a 包括文件也显示



** shell的用法
echo
declare -aixr
变量的删除,#,##,%,%%,${var#/*/}
取代功能,${变量/旧char/新char} 符合旧char的第一个替换
         ${变量//旧char/新char} 符合旧char的所有都替换

如何对变量进行测试为空呢?
# 如果不为空就赋值
var=${var-Value}
var=${var:-Value}
** Bash 的操作环境
命令寻找的顺序
alias
bash的内建命令
$PATH里搜寻
因此,这也解释了alias ls='ls -l'后,再用ls总是多个-l的效果
*** Bash 的配置文件
login 与 non-login shell
输密码的是login shell,不输入密码的是non-login shell
两个bash的配置情况不一样.

login shell怎么读?
1. /etc/profile 系统配置
   
   像bash的颜色,字体,大小...
   
   若干关键变量,PATH.MAIL.USER...
   _呼叫外部的配置数据_ 不同发行版不一样
   eg. /etc/inputrc /etc/profile.d/*sh /etc/sysconfig/i18n
2. ~/.bash_profile ~/.bash_login ~/.profile 个人配置
** 数据重定向输入
>,>>,的用处
2>,2>>
1>,1>>
<以文件代替键盘输入,<<'str'直到遇到'str'才停止输入.
 命令回传值 && ||怎么用?
** 管道命令
echo $PATH | cut -d ':' -f 3,5 用:分割,取第3,5个内容

export | cut -c 12- 输出每行第十二个字符以后的东西,具有格式的输出

# 在man.config搜索,并高亮显示搜寻的结果
grep --color=auto 'MANPATH' /etc/man.config

-i 忽略大小写

| grep -v 'str' 反向选择 


排序命令

sort
-r 反向排序
-t ':' -k 3 以:为分隔符,第三列排序

uniq
-i 忽略大小写
-c 计数

wc
默认列出行数\英文单字\多少字符
-l -w -m

双向重导向 tee
** 

   




